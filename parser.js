// Generated by CoffeeScript 1.7.1
(function() {
  var Instruction,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Instruction = (function() {
    function Instruction() {
      this.keyword = '';
      this.parameter = [];
    }

    return Instruction;

  })();

  window.Parser = (function() {
    function Parser() {
      this.parse = __bind(this.parse, this);
      this.read = __bind(this.read, this);
      this.source = '';
      this.error = '';
      this.index = 0;
    }

    Parser.prototype.read = function(terms) {
      var instruction, instructions;
      instructions = [];
      while (this.index < terms.length) {
        instruction = new Instruction;
        switch (terms[this.index].toUpperCase()) {
          case 'FORWARD':
          case 'FD':
          case 'BACK':
          case 'BK':
          case 'LEFT':
          case 'LT':
          case 'RIGHT':
          case 'RT':
            instruction.keyword = terms[this.index].toUpperCase();
            instruction.parameter.push(terms[this.index + 1]);
            this.index += 2;
            break;
          case 'SHOWTURTLE':
          case 'ST':
          case 'HIDETURTLE':
          case 'HT':
            instruction.keyword = terms[this.index].toUpperCase();
            this.index += 1;
            break;
          case 'REPEAT':
            instruction.keyword = terms[this.index].toUpperCase();
            instruction.parameter.push(terms[this.index + 1]);
            if (terms[this.index + 2] !== '[') {
              this.error = 'No "[" after REPEAT.';
              return;
            }
            this.index += 3;
            instruction.parameter.push(this.read(terms));
            break;
          case ']':
            this.index += 1;
            return instructions;
          case 'HOME':
          case 'CLEARSCREEN':
          case 'CS':
          case 'DRAW':
            instruction.keyword = terms[this.index].toUpperCase();
            this.index += 1;
            break;
          case 'PENDOWN':
          case 'PD':
          case 'PENUP':
          case 'PU':
            instruction.keyword = terms[this.index].toUpperCase();
            this.index += 1;
            break;
          case 'SETHEADING':
          case 'SETH':
          case 'SETX':
          case 'SETY':
            instruction.keyword = terms[this.index].toUpperCase();
            instruction.parameter.push(terms[this.index + 1]);
            this.index += 2;
            break;
          case 'SETXY':
            instruction.keyword = terms[this.index].toUpperCase();
            instruction.parameter.push(terms[this.index + 1]);
            instruction.parameter.push(terms[this.index + 2]);
            this.index += 3;
            break;
          default:
            this.error = '"' + terms[this.index] + '" is not defined.';
            return;
        }
        instructions.push(instruction);
      }
      return instructions;
    };

    Parser.prototype.parse = function(source) {
      var raw_term, raw_terms, terms, _i, _len;
      this.source = source;
      raw_terms = this.source.split(/[\s\n\t]+/);
      terms = [];
      for (_i = 0, _len = raw_terms.length; _i < _len; _i++) {
        raw_term = raw_terms[_i];
        if (__indexOf.call(raw_term, '[') >= 0) {
          terms.push('[');
          raw_term = raw_term.substr(1);
        }
        if (__indexOf.call(raw_term, ']') >= 0) {
          raw_term = raw_term.substr(0, raw_term.length - 1);
          if (raw_term.length > 0) {
            terms.push(raw_term);
          }
          terms.push(']');
        } else {
          if (raw_term.length > 0) {
            terms.push(raw_term);
          }
        }
      }
      this.error = '';
      this.index = 0;
      return this.read(terms);
    };

    return Parser;

  })();

}).call(this);
