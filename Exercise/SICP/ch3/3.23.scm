(define (make-deque)
  (define (make-node prev item next)
    (define (set-prev! item)
      (set! prev item))
    (define (set-next! item)
      (set! next item))
    (define (dispatch m)
      (cond ((eq? m 'prev) prev)
            ((eq? m 'next) next)
            ((eq? m 'set-prev!) set-prev!)
            ((eq? m 'set-next!) set-next!)
            (else item)))
    dispatch)
  (define front-ptr '())
  (define rear-ptr '())
  (define (empty-deque?) (null? front-ptr))
  (define (front-deque) (front-ptr 'item))
  (define (rear-deque) (rear-ptr 'item))
  (define (front-insert-deque! item)
    (let ((new-node (make-node '() item '())))
      (cond ((empty-deque?)
             (set! front-ptr new-node)
             (set! rear-ptr new-node)
             new-node)
            (else
             ((front-ptr 'set-next!) new-node)
             ((new-node 'set-prev!) front-ptr)
             (set! front-ptr new-node)
             new-node))))
  (define (rear-insert-deque! item)
    (let ((new-node (make-node '() item '())))
      (cond ((empty-deque?)
             (set! front-ptr new-node)
             (set! rear-ptr new-node)
             new-node)
            (else
             ((rear-ptr 'set-prev!) new-node)
             ((new-node 'set-next!) rear-ptr)
             (set! rear-ptr new-node)
             new-node))))
  (define (front-delete-deque!)
    (cond ((null? (front-ptr 'prev))
           (set! front-ptr '())
           (set! rear-ptr '())
           front-ptr)
          (else
           (set! front-ptr (front-ptr 'prev))
           ((front-ptr 'set-next!) '())
           front-ptr)))
  (define (rear-delete-deque!)
    (cond ((null? (rear-ptr 'next))
           (set! front-ptr '())
           (set! rear-ptr '())
           rear-ptr)
          (else
           (set! rear-ptr (rear-ptr 'next))
           ((rear-ptr 'set-prev!) '())
           rear-ptr)))
  (define (print-deque)
    (define (iter node)
      (if (not (null? node))
          (begin
            (display (node 'value))
            (if (not (null? (node 'next)))
                (display " "))
            (iter (node 'next)))))
    (display "[")
    (iter rear-ptr)
    (display "]")
    (newline))
  (define (dispatch m)
    (cond ((eq? m 'empty-deque?) (empty-deque?))
          ((eq? m 'front-deque) (front-deque))
          ((eq? m 'rear-deque) (rear-deque))
          ((eq? m 'front-insert-deque!) front-insert-deque!)
          ((eq? m 'rear-insert-deque!) rear-insert-deque!)
          ((eq? m 'front-delete-deque!) (front-delete-deque!))
          ((eq? m 'rear-delete-deque!) (rear-delete-deque!))
          (else (print-deque))))
  dispatch)