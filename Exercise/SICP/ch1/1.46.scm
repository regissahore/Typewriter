(define tolerance 0.00001)
(define (iterative-improve close-enough? improve)
    (lambda (guess)
        (define (iter x)
            (let ((next (improve x)))
            (if (close-enough? x next)
                next
                (iter next))))
        (iter guess)))
(define (sqrt x)
    (define (close-enough? x y)
        (< (abs (- x y)) 0.01))
    (define (improve guess)
        (* (+ guess (/ x guess)) 0.5))
    ((iterative-improve close-enough? improve) 1.0))
(define (fixed-point f guess)
    (define (close-enough? x y)
        (< (abs (- x y)) 0.01))
    (define (improve x) (f x))
    ((iterative-improve close-enough? improve) 1.0))