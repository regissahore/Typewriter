(load "1.20.scm")
(load "1.21.scm")
(define (filtered-accumulate filter combine null-value term a next b)
    (if (> a b)
        null-value
        (if (filter a)
            (combine (term a) (filtered-accumulate filter combine null-value term (next a) next b))
            (filtered-accumulate filter combine null-value term (next a) next b))))
(define (filtered-accumulate filter combine null-value term a next b)
    (define (iter a result)
        (if (> a b)
            result
            (if (filter a)
                (iter (next a) (combine result (term a)))
                (iter (next a) result))))
    (iter a null-value))
(define (prime-sum a b)
    (filtered-accumulate prime? + 0 (lambda (x) x) a (lambda (x) (+ x 1)) b))
(define (gcd-sum n)
    (filtered-accumulate (lambda (x) (= (gcd x n) 1)) * 1 (lambda (x) x) 1 (lambda (x) (+ x 1)) n))