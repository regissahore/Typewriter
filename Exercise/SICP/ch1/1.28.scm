(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((and (not (= base 1))
              (not (= base (- m 1)))
              (= 1 (remainder (square base) m))) 0)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m))
                    m))
        (else
         (remainder (* base (expmod base (- exp 1) m))
                    m))))             
(define (miller-rabin-test n)
  (define (test-iter n m)
    (cond ((= m 0) #t)
          ((= (expmod (+ (random (- n 1)) 1) (- n 1) n) 1) 
           (test-iter n (- m 1)))
          (else #f)))
  (test-iter n (ceiling (/ n 2))))