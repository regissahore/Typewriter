(load "2.10.scm")
(define (mul-interval x y)
    (let ((lx (lower-bound x))
          (ux (upper-bound x))
          (ly (lower-bound y))
          (uy (upper-bound y))
          (ax? (and (not (positive? lx)) (not (positive? ux))))
          (bx? (and (not (positive? lx)) (positive? ux)))
          (cx? (and (positive? lx) (positive? ux)))
          (ay? (and (not (positive? ly)) (not (positive? uy))))
          (by? (and (not (positive? ly)) (positive? uy)))
          (cy? (and (positive? ly) (positive? uy))))
    (cond (ax? (cond (ay? (make-interval (* ux uy) (* lx ly)))
                     (by? (make-interval (* lx uy) (* lx ly)))
                     (cy? (make-interval (* lx uy) (* ux ly)))))
          (bx? (cond (ay? (make-interval (* ux ly) (* lx ly)))
                     (by? (make-interval (min (* lx uy) (* ux ly)) 
                                         (max (* lx ly) (* ux uy))))
                     (cy? (make-interval (* lx uy) (* ux uy)))))
          (cx? (cond (ay? (make-interval (* ux ly) (* lx uy)))
                     (by? (make-interval (* ux ly) (* ux uy)))
                     (cy? (make-interval (* lx ly) (* ux uy))))))))