(load "2.36.scm")
(define (dot-product v w)
    (define (map op x y)
        (if (or (null? x) (null? y))
            (list)
            (append (list (op (car x) (car y)))
                    (map op (cdr x) (cdr y)))))
    (accumulate + 0 (map * v w)))
(define (matrix-*-vector m v)
    (map (lambda (row) 
             (dot-product row v)) m))
(define (transpose mat)
    (accumulate-n cons (list) mat))
(define (matrix-*-matrix m n)
    (let ((cols (transpose n)))
        (map (lambda (row)
                 (matrix-*-vector cols row)) m)))