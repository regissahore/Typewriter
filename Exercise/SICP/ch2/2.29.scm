(define (make-mobile left right)
    (list left right))
(define (left-branch mobile)
    (car mobile))
(define (right-branch mobile)
    (cadr mobile))
(define (make-branch length structure)
    (list length structure))
(define (branch-length branch)
    (car branch))
(define (branch-structure branch)
    (cadr branch))
(define (total-weight mobile)
    (+ (branch-weight (left-branch mobile))
       (branch-weight (right-branch mobile))))
(define (branch-weight branch)
    (if (pair? (branch-structure branch))
        (total-weight (branch-structure branch))
        (branch-structure branch)))
(define (branch-torque branch)
    (* (branch-length branch)
       (branch-weight branch)))
(define (same-torque? left right)
    (= (branch-torque left)
       (branch-torque right)))
(define (mobile-balance? mobile)
    (and (same-torque? (left-branch mobile) (right-branch mobile))
         (branch-balance? (left-branch mobile))
         (branch-balance? (right-branch mobile))))
(define (branch-balance? branch)
    (if (pair? (branch-structure branch))
        (mobile-balance? (branch-structure branch))
        #t))
(define (make-mobile left right)
    (cons left right))
(define (make-branch length structure)
    (cons length structure))
(define (right-branch mobile)
    (cdr mobile))
(define (branch-structure branch)
    (cdr branch))