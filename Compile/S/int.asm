DATA SEGMENT
    NUM DW ?
    INPUT_BUFFER DB 128 DUP(0)
DATA ENDS
CODE SEGMENT
    ASSUME CS: CODE, DS: DATA
START:
    MOV AX, DATA
    MOV DS, AX
    CALL READ_INT
    MOV NUM, BX
    MOV BX, NUM
    MOV BX, AX
    CALL WRITE_INT
    MOV AH, 4CH
    INT 21H
READ_INT:
    MOV BX, 0
READ_LOOP:
    MOV AH, 01H
    INT 21H
    CMP AL, 0DH
    JE WRITE_NEWLINE
    MOV CH, 0
    MOV CL, AL
    MOV AX, BX
    MOV BX, 10
    MUL BX
    MOV BX, CX
    SUB BX, 30H
    ADD BX, AX
    JMP READ_LOOP
WRITE_INT:
    MOV SI, 0
    MOV CX, BX
    LEA BX, INPUT_BUFFER[SI]
    MOV BYTE PTR [BX], 0
WRITE_LOOP:
    AND CX, CX
    JZ WRITE_OUT
    MOV DX, 0
    MOV AX, CX
    MOV CX, 10
    DIV CX
    ADD DL, 30H
    LEA BX, INPUT_BUFFER[SI]
    MOV BYTE PTR [BX], DL
    MOV CX, AX
    INC SI
    JMP WRITE_LOOP
WRITE_OUT:
    CMP SI, 0
    JE WRITE_ZERO
    MOV AH, 02H
WRITE_NORMAL:
    CMP SI, 0
    JBE WRITE_NEWLINE
    DEC SI
    LEA BX, INPUT_BUFFER[SI]
    MOV DL, BYTE PTR [BX]
    INT 21H
    JMP WRITE_NORMAL
WRITE_ZERO:
    MOV AH, 02H
    MOV DL, 30H
    INT 21H
WRITE_NEWLINE:
    MOV DL, 0DH
    MOV AH, 02H
    INT 21H
    MOV DL, 0AH
    MOV AH, 02H
    INT 21H
    RET
CODE ENDS
END START